#!/bin/bash
set -x

function create-developer-user() {

  ARGS=$@
  DEVELOPER_USER=$1
  DEVELOPER_HOME="/home/$DEVELOPER_USER"
  # set an unprivileged user using the host UID to avoid messing with perms
  test -z $HOST_UID && HOST_UID=1000
  test -z $HOST_GID && HOST_GID=1000
  export uid=$HOST_UID gid=$HOST_GID
  if [ -z $(grep ^$DEVELOPER_USER /etc/passwd) ]
  then
    echo "$DEVELOPER_USER:!:${uid}:${gid}:$DEVELOPER_USER,,,:$DEVELOPER_HOME:/bin/bash" >> /etc/passwd
    echo "$DEVELOPER_USER:!:${uid}:" >> /etc/group
    echo "$DEVELOPER_USER:*:99999:0:99999:7:::" >> /etc/shadow
    echo "$DEVELOPER_USER ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/$DEVELOPER_USER
    chmod 0440 /etc/sudoers.d/$DEVELOPER_USER
    if [ ! -d "$DEVELOPER_HOME" ]
    then
      cp -a /etc/skel $DEVELOPER_HOME
    else
      rsync -Pav /etc/skel/ ${DEVELOPER_HOME}/
    fi
    chown ${uid}:${gid} -R $DEVELOPER_HOME
  fi

}

function dump-docker-environment() {

  # dump container environment
  echo "#!/bin/bash" > /etc/profile.d/docker-environment.sh
  env | grep -v "_=\|HOME\|SHLVL\|PWD\|PATH\|HOSTNAME\|affinity:container" |\
    sed 's|\(.*\)=\(.*\)|export \1="\2"|' >> /etc/profile.d/docker-environment.sh

}

function configure-locales() {

  for locale in $LOCALES
  do
    locale-gen $locale
  done
  update-locale LANG="$(echo $LOCALES | awk '{print $1}')"

}

function add-virtualhosts-to-etc-hosts() {

  sed "s|.*127.0.0.1.*|127.0.0.1 localhost ${VIRTUAL_HOSTS}|g" /etc/hosts > /tmp/hosts
  cp -a /tmp/hosts /etc/hosts

}

function check-mysql-conn() {

  SOCK_TIMEOUT=1
  MYSQLD_SOCK="$(rgrep sock /etc/my* | awk -F: '{print $2}'| grep ^socket | grep "mysql\|maria" | awk '{print $NF}'| sort | uniq)"
  # wait for socket to be ready
  ( sleep $SOCK_TIMEOUT | socat - UNIX-CONNECT:$MYSQLD_SOCK ) | grep -i "mysql\|maria"
  return $?

}

function start-mysqld-safe() {

  #MYSQLD_SAFE="mysqld_safe --user mysql --skip-grant-tables"
  MYSQLD_SAFE="mysqld_safe --user mysql"
  $MYSQLD_SAFE &

}

function init-mysql-db() {

  if [[ -z "$MYSQL_HOST" ]] || [[ "$MYSQL_HOST" == "localhost" ]]
  then

    if [ -z "$MYSQL_DBNAME" ]
    then
      if [ -z "$PROJECT_NAME" ]
      then
        MYSQL_DBNAME=_PROJECT_NAME_
      else
        MYSQL_DBNAME="$(echo $PROJECT_NAME | sed 's|-|_|g')"
      fi
    else
      MYSQL_DBNAME="$(echo $PROJECT_NAME | sed 's|-|_|g')"
    fi
    echo "export MYSQL_DBNAME=$MYSQL_DBNAME" > /etc/profile.d/mysql-environment.sh

    test -z "$MYSQL_HOST" && echo "export MYSQL_HOST=localhost" >> /etc/profile.d/mysql-environment.sh
    test -z "$MYSQL_USER" && MYSQL_USER=root && echo "export MYSQL_USER=$MYSQL_USER" >> /etc/profile.d/mysql-environment.sh
    test ! -z "$MYSQL_PASS" && echo "export MYSQL_PASS=$MYSQL_PASS" >> /etc/profile.d/mysql-environment.sh

    if [ ! -e "/var/lib/mysql/$MYSQL_DBNAME" ]
    then

      if [ ! -e "/var/lib/mysql/mysql" ]
      then
        rsync -Pav /var/lib/mysql.dist/ /var/lib/mysql/
      fi
      
      chown -R mysql: /var/lib/mysql
      start-mysqld-safe

      check-mysql-conn
      while [ $? -ne 0 ]
      do
        sleep 1
        check-mysql-conn
      done

      if [ -e /data/initial.sql ]
      then
        mysql < /data/initial.sql 
      else
        sed -i "s|_MYSQL_DBNAME_|$MYSQL_DBNAME|g" /assets/initial.sql
        sed -i "s|_PROJECT_NAME_|$MYSQL_DBNAME|g" /assets/initial.sql
        mysql < /assets/initial.sql 
      fi

      if [ "$MYSQL_USER" == "root" ]
      then
        echo "SET PASSWORD = PASSWORD(\"$MYSQL_PASS\");" | mysql 
      else
        echo "CREATE USER '${MYSQL_USER}'@'%' IDENTIFIED BY '${MYSQL_PASS}';" | mysql
        echo "GRANT ALL PRIVILEGES ON ${MYSQL_DBNAME}.* TO '${MYSQL_USER}'@'%' WITH GRANT OPTION;" | mysql
        echo "SET PASSWORD FOR '$MYSQL_USER'@'%' = PASSWORD(\"$MYSQL_PASS\");" | mysql
      fi

      pkill -f mysql
    else
      chown -R mysql: /var/lib/mysql
    fi
    while [ ! -z "$(pgrep mysqld)" ]; do sleep 1; done
  else
    rm -f /etc/supervisor/conf.d/mysql.ini
  fi

}

function link-assets() {

  RSYNC_EXCLUDES="--exclude=var/www/html --exclude=initial.sql"
  RSYNC_OPTS="-Pav"

  rsync $RSYNC_OPTS $RSYNC_EXCLUDES /assets/ /  

}

function leave-supervisord-in-foreground() {

  LOG_DIR=$(grep logfile /etc/supervisor/supervisord.conf | awk -F= '{print $2}' | awk '{print $1}' | sed 's|;||g' | xargs dirname)
  mkdir -p $LOG_DIR
  
  exec supervisord -n -c /etc/supervisor/supervisord.conf

  exec "$@"


}

function set-environment-divergences() {

  # remove xdebug if we are not in devel/staging environment
  if [[ -z "$(echo $ENVIRONMENT | grep "dev\|stg")" ]]
  then
    rm /etc/php/apache2/conf.d/20-xdebug.ini
  fi

  # unset basic auth if we are not in devel/staging

}
